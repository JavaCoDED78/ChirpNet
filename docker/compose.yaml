version: '3.9'

name: chirpnet

networks:
  mongo-cluster-profile:
    driver: bridge
  cassandra-cluster-tweet:
    driver: bridge

volumes:
  mongo-profile-1-data:
  mongo-profile-2-data:
  mongo-profile-3-data:
  cassandra-tweet-1-data:
  cassandra-tweet-2-data:
  cassandra-tweet-3-data:
  postgres-auth-data:
  kafka-1-data:
  kafka-2-data:
  kafka-3-data:
  redis-profile-data:
  redis-tweet-data:
  minio-data:

services:
  postgres-authentication-service:
    container_name: postgres_auth_service
    hostname: postgres_auth_service
    image: 'postgres:latest'
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - postgres-auth-data:/data/postgres
    ports:
      - "5432:5432"
    restart: unless-stopped

  kafka-1:
    image: 'bitnami/kafka:latest'
    container_name: kafka-1
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_KRAFT_CLUSTER_ID=uSkCQGBwQsSWNABM8G3UhQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-1:9090,EXTERNAL://${HOSTNAME:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-1-data:/bitnami/kafka

  kafka-2:
    image: 'bitnami/kafka:latest'
    container_name: kafka-2
    ports:
      - "9094:9094"
    environment:
      - KAFKA_CFG_NODE_ID=2
      - KAFKA_KRAFT_CLUSTER_ID=uSkCQGBwQsSWNABM8G3UhQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-2:9090,EXTERNAL://${HOSTNAME:-localhost}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-2-data:/bitnami/kafka

  kafka-3:
    image: 'bitnami/kafka:latest'
    container_name: kafka-3
    ports:
      - "9096:9096"
    environment:
      - KAFKA_CFG_NODE_ID=3
      - KAFKA_KRAFT_CLUSTER_ID=uSkCQGBwQsSWNABM8G3UhQ
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka-1:9091,2@kafka-2:9091,3@kafka-3:9091
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9090,CONTROLLER://:9091,EXTERNAL://:9096
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka-3:9090,EXTERNAL://${HOSTNAME:-localhost}:9096
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-3-data:/bitnami/kafka

  redis-profile-service:
    container_name: redis_profile_service
    hostname: redis_profile_service
    image: 'redis:alpine'
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-profile-data:/data

  mongo-profile-1:
    container_name: mongo_profile_rs0
    image: 'mongo:jammy'
    hostname: mongoprofile1
    command:
      - '--replSet'
      - 'rs_profile'
      - '--bind_ip'
      - '0.0.0.0'
      - '--port'
      - '27017'
      - '--keyFile'
      - /etc/mongodb/pki/keyfile
    volumes:
      - 'mongo-profile-1-data:/data/db'
      - 'mongo-profile-1-data:/data/configdb'
      - './mongo-keyfile:/etc/mongodb/pki/keyfile'
      - './init-mongo-auth.js:/docker-entrypoint-initdb.d/init-mongo.js'
    ports:
      - '27017:27017'
    networks:
      - mongo-cluster-profile
    healthcheck:
      test: >-
        echo "try {rs.status()} catch(err)
        {rs.initiate({_id:'rs_profile',members:[{_id:0,host:'mongoprofile1:27017',priority:1},{_id:1,host:'mongoprofile2:27018',priority:0.5},{_id:2,host:'mongoprofile3:27019',priority:0.5}]})}"
        | mongosh --port 27017 -u '${MONGO_ADMIN_USER}' -p
        '${MONGO_ADMIN_PASSWD}' --authenticationDatabase
        admin --quiet
      interval: 5m
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ADMIN_PASSWD}
      MONGO_INITDB_DATABASE: profile-service
      DB_USERNAME: profile
      DB_PASSWORD: profile

  mongo-profile-2:
    container_name: mongo_profile_rs1
    image: 'mongo:jammy'
    hostname: mongoprofile2
    command:
      - '--replSet'
      - 'rs_profile'
      - '--bind_ip'
      - '0.0.0.0'
      - '--port'
      - '27018'
      - '--keyFile'
      - /etc/mongodb/pki/keyfile
    volumes:
      - 'mongo-profile-2-data:/data/db'
      - 'mongo-profile-2-data:/data/configdb'
      - './mongo-keyfile:/etc/mongodb/pki/keyfile'
    ports:
      - '27018:27017'
    networks:
      - mongo-cluster-profile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ADMIN_PASSWD}

  mongo-profile-3:
    container_name: mongo_profile_rs2
    image: 'mongo:jammy'
    hostname: mongoprofile3
    command:
      - '--replSet'
      - 'rs_profile'
      - '--bind_ip'
      - '0.0.0.0'
      - '--port'
      - '27019'
      - '--keyFile'
      - /etc/mongodb/pki/keyfile
    volumes:
      - 'mongo-profile-3-data:/data/db'
      - 'mongo-profile-3-data:/data/configdb'
      - './mongo-keyfile:/etc/mongodb/pki/keyfile'
    ports:
      - '27019:27017'
    networks:
      - mongo-cluster-profile
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ADMIN_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ADMIN_PASSWD}

  mongo-express:
    container_name: mongo-express
    image: 'mongo-express:latest'
    ports:
      - '8091:8081'
    networks:
      - mongo-cluster-profile
    environment:
      ME_CONFIG_BASICAUTH: false
      ME_CONFIG_MONGODB_ENABLE_ADMIN: false
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_ADMIN_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_ADMIN_PASSWD}
      ME_CONFIG_MONGODB_URL: >-
        mongodb://profile:profile@mongoprofile1:27017,mongoprofile2:27018,mongoprofile3:27019/profile-service?replicaSet=rs_profile
    depends_on:
      mongo-profile-1:
        condition: service_healthy

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server ~/minio --console-address :9090
    ports:
      - '9090:9090'
      - '9000:9000'
    volumes:
      - minio-data:/minio

  redis-tweet-service:
    container_name: redis_tweet_service
    hostname: redis_tweet_service
    image: 'redis:alpine'
    ports:
      - "6380:6379"
    restart: unless-stopped
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-tweet-data:/data

  cassandra-tweet-1:
    image: 'cassandra:latest'
    container_name: cassandra_tweet_1
    hostname: cassandratweet1
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 1024M
    ports:
      - '7000:7000'
      - '9042:9042'
    networks:
      - cassandra-cluster-tweet
    environment:
      CASSANDRA_START_RPC: true
      CASSANDRA_RPC_ADDRESS: 0.0.0.0
      CASSANDRA_LISTEN_ADDRESS: auto
      CASSANDRA_CLUSTER_NAME: tweet-cluster
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_DC: tweet-datacenter-1
      CASSANDRA_AUTHENTICATOR: PasswordAuthenticator
      CASSANDRA_PASSWORD_SEEDER: true
      CASSANDRA_SUPERUSER_NAME: ${CASSANDRA_USERNAME}
      CASSANDRA_SUPERUSER_PASSWORD: ${CASSANDRA_PASSWORD}
    volumes:
      - cassandra-tweet-1-data:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status" ]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3

  cassandra-tweet-2:
    image: 'cassandra:latest'
    container_name: cassandra_tweet_2
    hostname: cassandratweet2
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 1024M
    ports:
      - '9043:9042'
    networks:
      - cassandra-cluster-tweet
    environment:
      CASSANDRA_START_RPC: true
      CASSANDRA_RPC_ADDRESS: 0.0.0.0
      CASSANDRA_LISTEN_ADDRESS: auto
      CASSANDRA_CLUSTER_NAME: tweet-cluster
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_DC: tweet-datacenter-1
      CASSANDRA_AUTHENTICATOR: PasswordAuthenticator
      CASSANDRA_SEEDS: cassandra-tweet-1
    depends_on:
      cassandra-tweet-1:
        condition: service_healthy
    volumes:
      - cassandra-tweet-2-data:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status" ]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3

  cassandra-tweet-3:
    image: 'cassandra:latest'
    container_name: cassandra_tweet_3
    hostname: cassandratweet3
    deploy:
      resources:
        limits:
          memory: 1024M
        reservations:
          memory: 1024M
    ports:
      - '9044:9042'
    networks:
      - cassandra-cluster-tweet
    environment:
      CASSANDRA_START_RPC: true
      CASSANDRA_RPC_ADDRESS: 0.0.0.0
      CASSANDRA_LISTEN_ADDRESS: auto
      CASSANDRA_CLUSTER_NAME: tweet-cluster
      CASSANDRA_ENDPOINT_SNITCH: GossipingPropertyFileSnitch
      CASSANDRA_DC: tweet-datacenter-1
      CASSANDRA_AUTHENTICATOR: PasswordAuthenticator
      CASSANDRA_SEEDS: cassandra-tweet-1
    depends_on:
      cassandra-tweet-1:
        condition: service_healthy
    volumes:
      - cassandra-tweet-3-data:/var/lib/cassandra:rw
    restart:
      on-failure
    healthcheck:
      test: [ "CMD-SHELL", "nodetool status" ]
      interval: 2m
      start_period: 2m
      timeout: 10s
      retries: 3
